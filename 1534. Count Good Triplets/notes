
---

## ✅ **Problem Purpose**

The function **counts the number of "good triplets"** in the given array `arr` that satisfy three conditions.

---

## ✅ **Definition of a Good Triplet**

Given a list `arr` and three integers `a`, `b`, and `c`, a triplet `(i, j, k)` is called a **good triplet** if:
1. `i < j < k`  
2. `|arr[i] - arr[j]| <= a`  
3. `|arr[j] - arr[k]| <= b`  
4. `|arr[i] - arr[k]| <= c`

---

## ✅ **Code Explanation**

```python
class Solution:
    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:
        count = 0

        for i in range(len(arr)):
            for j in range(i+1, len(arr)):
                for k in range(j+1, len(arr)):
                    if (
                        abs(arr[i] - arr[j]) <= a and
                        abs(arr[j] - arr[k]) <= b and
                        abs(arr[i] - arr[k]) <= c
                    ):
                        count += 1
            
        return count
```

### 🔍 What it does:

1. **Loops through all triplets** `(i, j, k)` where `i < j < k`
2. For each triplet, **checks the 3 conditions** using `abs()` (absolute value)
3. If all conditions are satisfied → counts it as a "good triplet"
4. Returns the total count

---

## 🧪 Example Walkthrough

### Input:
```python
arr = [3, 0, 1, 1, 9, 7]
a = 7
b = 2
c = 3
```

We go through all combinations `(i, j, k)` such that `i < j < k` and check the conditions.

Let’s try one valid one:

#### Try (i=0, j=2, k=3):  
- arr[i] = 3, arr[j] = 1, arr[k] = 1  
- |3 - 1| = 2 ≤ 7 → ✅  
- |1 - 1| = 0 ≤ 2 → ✅  
- |3 - 1| = 2 ≤ 3 → ✅  
✅ → Valid good triplet → count += 1

You continue doing that for all triplets. Eventually, you get a total count.

### Output:
```python
s = Solution()
print(s.countGoodTriplets([3, 0, 1, 1, 9, 7], 7, 2, 3))  # Output: 4
```

---
