
---

### 🔍 Step-by-Step Logic:

1. Loop through all possible combinations of `i < j < k`:
   - This ensures each triplet is unique and properly ordered.
2. Inside the innermost loop, check if all elements are **pairwise different**.
3. If they are, increment the `count`.
4. Finally, return the total count.

---

## 🧪 Example Walkthrough

### Input:
```python
nums = [1, 2, 3]
```

### Valid triplets (`i < j < k`):
- (0, 1, 2): values → (1, 2, 3)
    - All are different → ✅ count += 1

### Output:
```python
s = Solution()
print(s.unequalTriplets([1, 2, 3]))  # Output: 1
```

---

### Another Example:

```python
nums = [1, 1, 2, 3]
```

We loop through all combinations of `i < j < k`:

- (0, 1, 2): (1, 1, 2) ❌ (1 == 1)
- (0, 1, 3): (1, 1, 3) ❌ (1 == 1)
- (0, 2, 3): (1, 2, 3) ✅
- (1, 2, 3): (1, 2, 3) ✅

→ Total valid: 2

### Output:
```python
s = Solution()
print(s.unequalTriplets([1, 1, 2, 3]))  # Output: 2
```
