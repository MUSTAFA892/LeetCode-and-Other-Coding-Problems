## 🧩 Step-by-Step Explanation:

### 🟦 Line 1:

```python
class Solution:
```

* Defines a class `Solution` (as required by LeetCode’s structure).
* Inside this class, we’ll define our function that solves the problem.

---

### 🟦 Line 2:

```python
def smallestNumber(self, n: int) -> int:
```

* Defines a method `smallestNumber` which takes an integer `n`.
* The goal is to find the **smallest number `x ≥ n`** whose binary form has **all bits set to 1**.

---

### 🟦 Line 3:

```python
for i in range(n+1):
```

* Starts a loop where `i` goes from 0 up to `n` (inclusive).
* We’ll use `i` as the **number of bits** in our “all set bits” number.

---

### 🟦 Line 4:

```python
num = (2**i) - 1
```

* This line generates an “all set bits” number.
* Why? Because `(2**i) - 1` gives numbers like:

| i | Expression | num | Binary |
| - | ---------- | --- | ------ |
| 1 | 2¹ - 1     | 1   | 1      |
| 2 | 2² - 1     | 3   | 11     |
| 3 | 2³ - 1     | 7   | 111    |
| 4 | 2⁴ - 1     | 15  | 1111   |
| 5 | 2⁵ - 1     | 31  | 11111  |

These are exactly the numbers with **all bits = 1**.

---

### 🟦 Line 5:

```python
if num >= n:
    return num
```

* Checks if the current “all 1s” number is **greater than or equal to `n`**.
* If yes → immediately **return it** as the answer.
* Because it’s the **smallest** one that satisfies the condition (since we’re looping from smaller to larger).

---

## ✅ Summary:

The code loops through powers of 2, creates numbers of the form `(2^i - 1)`,
and stops as soon as it finds one that’s **≥ n**.

That’s your smallest number with all bits set to 1.

---

## ⚙️ Working Example

Let’s take:

```
n = 10
```

---

### Step-by-step trace:

| i | Expression | num = (2^i)-1 | Compare with n=10 | Action      |
| - | ---------- | ------------- | ----------------- | ----------- |
| 0 | 2⁰ - 1     | 0             | 0 < 10            | continue    |
| 1 | 2¹ - 1     | 1             | 1 < 10            | continue    |
| 2 | 2² - 1     | 3             | 3 < 10            | continue    |
| 3 | 2³ - 1     | 7             | 7 < 10            | continue    |
| 4 | 2⁴ - 1     | 15            | 15 ≥ 10           | ✅ return 15 |

---

### 🔢 Result:

```
Output = 15
```

Because `15` in binary is `1111` → all bits set,
and it’s the smallest number ≥ 10.

---

## 🧾 Final Output Example:

```python
Input: n = 10
Output: 15
```

Binary explanation:

```
n = 10 → 1010 (not all 1s)
Next all-1s number ≥ 10 → 1111 (which is 15)
```

