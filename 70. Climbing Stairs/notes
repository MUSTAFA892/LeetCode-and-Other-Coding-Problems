

1. **Function Definition**:
   ```python
   def climbStairs(self, n: int) -> int:
   ```
   - The function takes an integer `n` as input, which represents the number of stairs.
   - It returns an integer, which is the number of distinct ways to climb the stairs.

2. **Variables `a`, `b`, and `c`**:
   ```python
   a, b , c = 0, 1, 0
   ```
   - `a`: This variable represents the number of ways to climb to the (i-2)-th step (i.e., two steps behind the current step).
   - `b`: This variable represents the number of ways to climb to the (i-1)-th step (i.e., one step behind the current step).
   - `c`: This is used temporarily to store the sum of `a` and `b` in each iteration.

3. **Iterate `n` times**:
   ```python
   for i in range(n):
   ```
   - The loop runs `n` times, representing each step you would consider.
   - `i` tracks the current step number, and `n` determines how many steps we need to compute.

4. **Transition Formula (`c = a + b`)**:
   ```python
   c = a + b
   ```
   - The number of ways to reach the current step (`c`) is the sum of:
     - `a`: the number of ways to reach two steps before (i.e., `i-2`), because from there you can take a step of 2.
     - `b`: the number of ways to reach one step before (i.e., `i-1`), because from there you can take a step of 1.
   - Hence, the recurrence relation is: `f(i) = f(i-1) + f(i-2)`.

5. **Update the Variables**:
   ```python
   a, b = b ,c
   ```
   - After calculating the number of ways to reach the current step (`c`), we update the previous values of `a` and `b`:
     - `a` becomes `b` (i.e., the number of ways to reach the previous step).
     - `b` becomes `c` (i.e., the number of ways to reach the current step).
   - This is necessary because we are simulating the transition for each step.

6. **Return the Final Result (`b`)**:
   ```python
   return b
   ```
   - After completing the loop, `b` will contain the number of ways to reach the `n`-th step, which is the result we want.
   - The final value of `b` holds the number of ways to reach the last step because we update `b` in each iteration to hold the latest count.

7. **Base Cases**:
   - Initially, `a = 0` (no way to reach a step before the first step).
   - Initially, `b = 1` (there is exactly 1 way to reach the first step, which is to take a single step).
   - These base cases ensure that we correctly compute the number of ways for small values of `n`.

8. **Space Efficiency**:
   - The algorithm only uses a constant amount of space (`a`, `b`, and `c`), so the space complexity is `O(1)`.
   - This makes it very efficient in terms of memory usage.

9. **Time Efficiency**:
   - The algorithm runs in a single loop from 0 to `n-1`, making the time complexity `O(n)`.

10. **Handling Edge Cases**:
    - If `n = 0`, there are no stairs, and the answer is 0.
    - If `n = 1`, there is only one way to climb the stairs (take one step).
    - The function handles these cases implicitly, as it will correctly compute the values for small `n`.

---

### **Working Example**: 

Letâ€™s take an example where `n = 4`. 

```python
n = 4
```

1. **Initial State**:
   - `a = 0` (no ways to reach step -2)
   - `b = 1` (1 way to reach step 0, which is standing at the base)

2. **First iteration (`i = 0`)**:
   - Calculate `c = a + b = 0 + 1 = 1` (1 way to reach step 1).
   - Update: `a = b = 1`, `b = c = 1`.

3. **Second iteration (`i = 1`)**:
   - Calculate `c = a + b = 1 + 1 = 2` (2 ways to reach step 2: (1+1) or (2)).
   - Update: `a = b = 1`, `b = c = 2`.

4. **Third iteration (`i = 2`)**:
   - Calculate `c = a + b = 1 + 2 = 3` (3 ways to reach step 3: (1+1+1), (1+2), or (2+1)).
   - Update: `a = b = 2`, `b = c = 3`.

5. **Fourth iteration (`i = 3`)**:
   - Calculate `c = a + b = 2 + 3 = 5` (5 ways to reach step 4: (1+1+1+1), (1+1+2), (1+2+1), (2+1+1), or (2+2)).
   - Update: `a = b = 3`, `b = c = 5`.

6. **Return Value**:
   - The loop finishes, and the final value of `b` is `5`.
   - Therefore, there are 5 distinct ways to climb a staircase with 4 steps.

