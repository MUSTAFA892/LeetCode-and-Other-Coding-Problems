
---

### ✅ **1. Array-Based Marking Approach**

#### 🔍 Explanation (10 points):
1. **Goal**: Find the one duplicate number in an array of integers.
2. **Input Condition**: List `nums` has `n + 1` integers where each integer is between `1` and `n` (inclusive).
3. **Idea**: Use an auxiliary array `ans` to mark numbers that have already been seen.
4. **Initialization**: `ans = [0] * len(nums)` creates a list with all elements as `0`.
5. **Iteration**: Loop through each number `i` in the input `nums`.
6. **Marking Logic**: If `ans[i] == 1`, it means the number `i` has already been seen before → it's the duplicate.
7. **Else**: Mark `ans[i] = 1` to indicate number `i` has been seen.
8. **Return**: The first time we find `ans[i] == 1`, we return `i` as the duplicate.
9. **Time Complexity**: `O(n)` — because we iterate through the array once.
10. **Space Complexity**: `O(n)` — because of the extra array `ans`.

---

### ✅ **2. Counter-Based Approach using `collections.Counter`**

#### 🔍 Explanation (10 points):
1. **Import**: Requires `from collections import Counter`.
2. **Create Frequency Map**: `freq = Counter(nums)` builds a dictionary-like object with element counts.
3. **Loop**: `for val, count in freq.items()` iterates through each number and its count.
4. **Check Duplicate**: If any number has `count >= 2`, that number is the duplicate.
5. **Return**: Return the number `val` when its count is `2` or more.
6. **Cleaner**: More readable and concise; great for quick prototyping.
7. **Time Complexity**: `O(n)` — one pass to build the counter and one pass to check.
8. **Space Complexity**: `O(n)` — space for storing the counts in the Counter.
9. **No Mutation**: Doesn’t modify the input or need a separate array.
10. **General-Purpose**: Works for any list where frequency matters, not just duplicates.

---


### ✅ **Array-Based Marking Approach**

We initialize an array `ans` of length 5 (same as `nums`) with all 0s:  
`ans = [0, 0, 0, 0, 0]`

Now iterate through each element in `nums`:

1. `i = 3`:  
   - `ans[3] == 0` → mark it → `ans = [0, 0, 0, 1, 0]`
2. `i = 1`:  
   - `ans[1] == 0` → mark it → `ans = [0, 1, 0, 1, 0]`
3. `i = 3`:  
   - `ans[3] == 1` → already seen → **duplicate found: 3**

✔️ Output: `3`

---

### ✅ **Counter-Based Approach**

We count frequency of each number in `nums = [3, 1, 3, 4, 2]`:

```
Counter:
{
  3: 2,
  1: 1,
  4: 1,
  2: 1
}
```

Now scan through each item:

- 3 has a count of **2** → **duplicate found: 3**

✔️ Output: `3`

---
