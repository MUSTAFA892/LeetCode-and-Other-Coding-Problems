
### **1st Approach: Optimized (Using Frequency Dictionary)**

#### **Code:**
```python
class Solution:
    def numIdenticalPairs(self, nums: List[int]) -> int:
        count = 0
        freq = {}

        for n in nums:
            if n in freq:
                count += freq[n]
                freq[n] += 1
            else:
                freq[n] = 1

        return count
```

#### **Explanation:**
1. **Purpose**: The goal is to count how many pairs of indices `(i, j)` satisfy `nums[i] == nums[j]` where `i < j`.
2. **Frequency Dictionary**: This approach uses a dictionary `freq` to track how many times each number has appeared so far.
3. **Count Accumulation**: As you iterate through the list, for each number, if the number has been seen before (`n in freq`), we increment the count by the frequency of that number. Each previous occurrence of that number can form a pair with the current one.
4. **Update Frequency**: After incrementing the count, we increment the frequency of the number.
5. **Efficiency**: This approach only iterates over the list once, making it time-efficient with a time complexity of O(n), where `n` is the length of the list.
6. **Space Complexity**: The space complexity is O(k), where `k` is the number of unique numbers in the list.
7. **Memory Usage**: The dictionary stores the frequency of each number in the list, so in the worst case, the dictionary can store a unique entry for every number in the list.
8. **No Nested Loops**: Unlike the brute force approach, there are no nested loops, which significantly improves performance, especially for larger lists.
9. **Incrementing Count**: For every number that has appeared before, we count how many times it appeared (this gives us the number of pairs it can form with previous occurrences).
10. **Time Complexity**: O(n), where `n` is the size of the list. This makes it much more efficient than the brute force approach, which uses O(n^2) time.

#### **Working Example:**
Given the list `nums = [1, 2, 3, 1, 1, 3]`:

- Initialize: `count = 0`, `freq = {}`.
- First iteration (n = 1): `freq = {1: 1}`, `count = 0`.
- Second iteration (n = 2): `freq = {1: 1, 2: 1}`, `count = 0`.
- Third iteration (n = 3): `freq = {1: 1, 2: 1, 3: 1}`, `count = 0`.
- Fourth iteration (n = 1): `count += freq[1] = 0 + 1 = 1`, then `freq[1] += 1` → `freq = {1: 2, 2: 1, 3: 1}`.
- Fifth iteration (n = 1): `count += freq[1] = 1 + 2 = 3`, then `freq[1] += 1` → `freq = {1: 3, 2: 1, 3: 1}`.
- Sixth iteration (n = 3): `count += freq[3] = 3 + 1 = 4`, then `freq[3] += 1` → `freq = {1: 3, 2: 1, 3: 2}`.

**Final result**: `count = 4`.

---

### **2nd Approach: Brute Force (Using Nested Loops)**

#### **Code:**
```python
count = 0
for i in range(len(nums)):
    for j in range(i + 1, len(nums)):
        if nums[i] == nums[j]:
            count += 1
return count
```

#### **Explanation:**
1. **Purpose**: The goal is to count pairs of indices `(i, j)` where `nums[i] == nums[j]` and `i < j` by checking every possible pair.
2. **Two Loops**: We use two nested loops to check all possible pairs of elements in the list. The outer loop iterates over each element, while the inner loop checks all subsequent elements.
3. **Pair Comparison**: For each pair `(i, j)`, the elements `nums[i]` and `nums[j]` are compared. If they are equal, the pair is valid, and we increment the count.
4. **Time Complexity**: The time complexity is O(n^2) because of the nested loops. For each element `i`, we compare it with every subsequent element `j` in the list.
5. **Space Complexity**: The space complexity is O(1) because no extra space is used other than the variables `i`, `j`, and `count`.
6. **Brute Force**: This approach is straightforward but inefficient for large lists due to its quadratic time complexity.
7. **Iteration**: Each element is checked against every subsequent element to find matching pairs.
8. **No Frequency Tracking**: This approach doesn't involve storing frequency counts, so it doesn't benefit from optimizations like the first approach.
9. **Increased Execution Time**: As the size of the list increases, this approach becomes much slower due to the O(n^2) complexity.
10. **Simple Implementation**: It's easy to understand and implement, but not efficient for larger datasets.

#### **Working Example:**
Given the list `nums = [1, 2, 3, 1, 1, 3]`:

- First outer loop (i = 0): Inner loop checks pairs `(0, 1), (0, 2), (0, 3), (0, 4), (0, 5)`:
  - Pair `(0, 3)` → `nums[0] == nums[3]`, increment count → `count = 1`.
  - Pair `(0, 4)` → `nums[0] == nums[4]`, increment count → `count = 2`.
- Second outer loop (i = 1): Inner loop checks pairs `(1, 2), (1, 3), (1, 4), (1, 5)`:
  - No pairs match.
- Third outer loop (i = 2): Inner loop checks pairs `(2, 3), (2, 4), (2, 5)`:
  - No pairs match.
- Fourth outer loop (i = 3): Inner loop checks pairs `(3, 4), (3, 5)`:
  - Pair `(3, 4)` → `nums[3] == nums[4]`, increment count → `count = 3`.
- Fifth outer loop (i = 4): Inner loop checks pairs `(4, 5)`:
  - Pair `(4, 5)` → `nums[4] == nums[5]`, increment count → `count = 4`.

**Final result**: `count = 4`.

---

