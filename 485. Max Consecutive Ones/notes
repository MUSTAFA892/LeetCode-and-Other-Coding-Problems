
1. **Class Definition**:
   - The solution is implemented within a `class Solution` which adheres to the structure commonly used in coding challenge platforms like LeetCode.

2. **Method Signature**:
   - `findMaxConsecutiveOnes(self, nums: List[int]) -> int` is a method that takes a list of integers (`nums`) as input and returns an integer representing the maximum number of consecutive `1`s in the list.

3. **Initialization of Variables**:
   - `a = 0`: A counter to track the current streak of consecutive `1`s.
   - `max_ones = 0`: A variable to store the maximum streak of consecutive `1`s found so far.

4. **Iterating through the List**:
   - The loop `for i in range(len(nums)):` iterates over each element in the list `nums`.

5. **Checking for 1's**:
   - Inside the loop, `if nums[i] == 1:` checks if the current element is `1`.
   - If it's `1`, increment the counter `a` to track consecutive `1`s.

6. **Updating the Maximum Streak**:
   - `max_ones = max(max_ones, a)` updates `max_ones` to be the maximum value between the current `max_ones` and `a` (the current streak of `1`s).
   - This ensures that `max_ones` always holds the longest consecutive sequence of `1`s found so far.

7. **Handling 0's**:
   - If the current element is `0`, the counter `a` is reset to `0` because the streak of consecutive `1`s has ended. The next streak of `1`s will start fresh.

8. **Returning the Result**:
   - After the loop ends, `return max_ones` returns the length of the longest streak of consecutive `1`s found in the list.

9. **Efficient Time Complexity**:
   - The time complexity of the algorithm is **O(n)**, where `n` is the length of `nums`, because the loop goes through the list only once.

10. **Constant Space Complexity**:
    - The space complexity is **O(1)** because the algorithm uses a fixed amount of extra space regardless of the input size (only two integer variables `a` and `max_ones`).

---

### Working Example:

**Input**:
```python
nums = [1, 0, 1, 1, 0, 1, 1, 1]
```

**Execution**:
1. **Initial State**: 
   - `a = 0`, `max_ones = 0`
   
2. **Iteration 1** (i = 0, `nums[0] = 1`):
   - `a` increments by 1: `a = 1`
   - `max_ones = max(0, 1) = 1`
   
3. **Iteration 2** (i = 1, `nums[1] = 0`):
   - `a` resets to 0: `a = 0`
   - `max_ones remains 1`
   
4. **Iteration 3** (i = 2, `nums[2] = 1`):
   - `a` increments by 1: `a = 1`
   - `max_ones = max(1, 1) = 1`
   
5. **Iteration 4** (i = 3, `nums[3] = 1`):
   - `a` increments by 1: `a = 2`
   - `max_ones = max(1, 2) = 2`
   
6. **Iteration 5** (i = 4, `nums[4] = 0`):
   - `a` resets to 0: `a = 0`
   - `max_ones remains 2`
   
7. **Iteration 6** (i = 5, `nums[5] = 1`):
   - `a` increments by 1: `a = 1`
   - `max_ones = max(2, 1) = 2`
   
8. **Iteration 7** (i = 6, `nums[6] = 1`):
   - `a` increments by 1: `a = 2`
   - `max_ones = max(2, 2) = 2`
   
9. **Iteration 8** (i = 7, `nums[7] = 1`):
   - `a` increments by 1: `a = 3`
   - `max_ones = max(2, 3) = 3`

**Final Output**:
- The longest consecutive `1`s in `nums = [1, 0, 1, 1, 0, 1, 1, 1]` is `3` (from indices 5 to 7).
- **Return Value**: `3`

### Output:
```python
3
```

---
