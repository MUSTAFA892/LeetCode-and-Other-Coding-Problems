

1. **Input Parameters**:
   - `banned`: A list of banned numbers that cannot be selected.
   - `n`: The upper limit of the range (from 1 to `n`).
   - `maxSum`: The maximum sum that can be achieved by selecting numbers.

2. **Convert Banned List to Set**:
   - `set_ = set(banned)`: Convert the list of banned numbers into a set to allow for efficient O(1) lookups when checking if a number is banned.

3. **Initialize Counters**:
   - `count = 0`: Keeps track of how many valid numbers have been added to the sum.
   - `sum_ = 0`: Stores the running sum of the selected numbers.

4. **Start from 1**:
   - `i = 1`: The loop starts from `i = 1` and goes up to `n`.

5. **Loop Condition**:
   - The loop runs as long as `i <= n`. The goal is to consider all integers from `1` to `n`.

6. **Check for Banned Number**:
   - `if i not in set_`: If the number `i` is not in the banned set, it is eligible to be added to the sum.

7. **Prevent Sum Overflow**:
   - `if sum_ + i > maxSum`: Before adding `i` to the sum, check if the new sum will exceed `maxSum`. If so, the loop breaks.

8. **Add Valid Numbers**:
   - `sum_ += i`: Add the current number `i` to the sum if it’s valid and doesn’t exceed `maxSum`.
   - `count += 1`: Increment the count of valid numbers selected.

9. **Increment `i`**:
   - After each check, increment `i` to check the next number in the range `[1, n]`.

10. **Return Count**:
   - After the loop finishes, return `count`, which represents how many valid numbers have been selected.

---

### Working Example:

Let's walk through an example to see how the function works step-by-step.

#### Example:

```python
banned = [11]
n = 7
maxSum = 50
solution = Solution()
print(solution.maxCount(banned, n, maxSum))
```

### Explanation:

1. **Initial Setup**:
   - `banned = [11]`: The number `11` is banned.
   - `n = 7`: We are considering numbers from `1` to `7`.
   - `maxSum = 50`: The sum of the selected numbers should not exceed `50`.

2. **Initialize**:
   - `set_ = {11}`: Convert the `banned` list into a set for efficient lookup.
   - `count = 0`, `sum_ = 0`: The initial sum and count are set to zero.
   - `i = 1`: Start from `i = 1`.

3. **First Iteration (`i = 1`)**:
   - `1 not in {11}` → True (1 is not banned).
   - `sum_ + 1 = 0 + 1 = 1` → The sum will not exceed `maxSum = 50`.
   - Add `1` to `sum_`, so `sum_ = 1` and `count = 1`.
   - Increment `i` to `2`.

4. **Second Iteration (`i = 2`)**:
   - `2 not in {11}` → True (2 is not banned).
   - `sum_ + 2 = 1 + 2 = 3` → The sum will not exceed `maxSum = 50`.
   - Add `2` to `sum_`, so `sum_ = 3` and `count = 2`.
   - Increment `i` to `3`.

5. **Third Iteration (`i = 3`)**:
   - `3 not in {11}` → True (3 is not banned).
   - `sum_ + 3 = 3 + 3 = 6` → The sum will not exceed `maxSum = 50`.
   - Add `3` to `sum_`, so `sum_ = 6` and `count = 3`.
   - Increment `i` to `4`.

6. **Fourth Iteration (`i = 4`)**:
   - `4 not in {11}` → True (4 is not banned).
   - `sum_ + 4 = 6 + 4 = 10` → The sum will not exceed `maxSum = 50`.
   - Add `4` to `sum_`, so `sum_ = 10` and `count = 4`.
   - Increment `i` to `5`.

7. **Fifth Iteration (`i = 5`)**:
   - `5 not in {11}` → True (5 is not banned).
   - `sum_ + 5 = 10 + 5 = 15` → The sum will not exceed `maxSum = 50`.
   - Add `5` to `sum_`, so `sum_ = 15` and `count = 5`.
   - Increment `i` to `6`.

8. **Sixth Iteration (`i = 6`)**:
   - `6 not in {11}` → True (6 is not banned).
   - `sum_ + 6 = 15 + 6 = 21` → The sum will not exceed `maxSum = 50`.
   - Add `6` to `sum_`, so `sum_ = 21` and `count = 6`.
   - Increment `i` to `7`.

9. **Seventh Iteration (`i = 7`)**:
   - `7 not in {11}` → True (7 is not banned).
   - `sum_ + 7 = 21 + 7 = 28` → The sum will not exceed `maxSum = 50`.
   - Add `7` to `sum_`, so `sum_ = 28` and `count = 7`.
   - Increment `i` to `8`.

10. **End of Loop**:
    - The loop ends because `i = 8` exceeds `n = 7`.

### Final Output:

```python
7
```

