### Explanation:

The function `frequencySort` sorts the list `nums` based on the frequency of each element. If two elements have the same frequency, the one with the higher value comes first.

1. **Counting Frequencies**: 
   - We use `Counter(nums)` to count how often each number appears in `nums`. This gives us a dictionary-like structure where the keys are the numbers and the values are their frequencies.

2. **Sorting**:
   - We sort the list `nums` using Python's `sorted` function.
   - The `key` argument specifies the sorting logic:
     - First, we sort by frequency using `freq[x]`.
     - If two elements have the same frequency, we sort them by their value in descending order (`-x` ensures the higher number comes first).

### Working Example:

Let’s take an example to see how it works:

```python
nums = [1, 1, 2, 2, 2, 3]
```

- **Step 1: Count Frequencies**
   - `freq = Counter(nums)` results in: `{1: 2, 2: 3, 3: 1}`.

- **Step 2: Sort List**
   - `sorted(nums, key=lambda x: (freq[x], -x))`:
     - For element `1`: `(freq[1], -1)` → `(2, -1)`
     - For element `2`: `(freq[2], -2)` → `(3, -2)`
     - For element `3`: `(freq[3], -3)` → `(1, -3)`
     
   After sorting by these tuples:
   - First, sort by frequency: 3 (for `2`), 2 (for `1`), and 1 (for `3`).
   - If frequencies are equal (as for `1` and `2`), we then sort by value in descending order.

- **Final Sorted List**: `[2, 2, 2, 1, 1, 3]`
