
1. **TreeNode Class (Commented Out)**:
   - The `TreeNode` class represents a binary tree node with attributes: `val` (the node's value), `left` (left child node), and `right` (right child node). This is standard for a binary tree.

2. **Method Definition (`largestValues`)**:
   - The method `largestValues` in the `Solution` class is designed to find the largest value in each row (level) of a binary tree. It returns a list of the largest values, one for each level.

3. **Helper Function (`is_greater`)**:
   - The helper function `is_greater` is defined within `largestValues` and uses recursion to traverse the binary tree.
   - It takes two parameters:
     - `node`: the current tree node being processed.
     - `level`: the current level of the tree during traversal.

4. **Base Case of Recursion**:
   - The first line of the helper function checks if the `node` is `None` (i.e., if it's an empty node). If so, it simply returns to avoid processing further.

5. **Adding Largest Value for a Level**:
   - The function checks if the current `level` is equal to the length of the list `arr`. If it is, this means we're at a new level, and the node's value is appended to `arr`.
   - If the `level` is already in `arr`, it updates the value at that level by taking the maximum between the current value and the node's value (`arr[level] = max(arr[level], node.val)`).

6. **Recursive Calls for Left and Right Subtrees**:
   - After handling the current node, the helper function makes recursive calls to the left and right child nodes of the current node (`is_greater(node.left, level + 1)` and `is_greater(node.right, level + 1)`).

7. **Tracking the Largest Values**:
   - The list `arr` is used to track the largest value at each level. If the node is on level 0, `arr[0]` stores the largest value for level 0, and so on for deeper levels.

8. **Initialization of the Result List (`arr`)**:
   - The result list `arr` is initialized as an empty list before calling the `is_greater` function to store the largest values at each level.

9. **Final Output**:
   - After traversing all the nodes in the binary tree and filling the list `arr`, the method `largestValues` returns the list `arr` as the final result.

10. **Time Complexity**:
   - The time complexity of this approach is O(N), where N is the number of nodes in the binary tree. This is because each node is visited once.

---

### Working Example:

Consider the following binary tree:

```
        1
       / \
      3   2
     / \   \
    5   3   9
```

1. At level 0, the largest value is `1`.
2. At level 1, the largest value is `3` (max of `3` and `2`).
3. At level 2, the largest value is `9` (max of `5`, `3`, and `9`).

**Steps:**
1. Start at the root node (`1`), level 0. `arr = [1]`.
2. Move to the left child (`3`), level 1. `arr = [1, 3]`.
3. Move to the left child of `3` (`5`), level 2. `arr = [1, 3, 5]`.
4. Move to the right child of `3` (`3`), level 2. No change since `3` is not greater than `5`.
5. Move to the right child (`2`), level 1. No change since `3` is greater than `2`.
6. Move to the right child of `2` (`9`), level 2. `arr = [1, 3, 9]`.

Final output: `[1, 3, 9]`.

