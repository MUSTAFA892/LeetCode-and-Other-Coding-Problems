### ðŸ”¹ Problem

Youâ€™re given a **grid of 0s and 1s**. You want to find the **minimum rectangular area** that covers all the cells containing `1`.

### ðŸ”¹ How it Works

* **`top`** â†’ the smallest row index where a `1` appears
* **`bottom`** â†’ the largest row index where a `1` appears
* **`left`** â†’ the smallest column index where a `1` appears
* **`right`** â†’ the largest column index where a `1` appears

After scanning the grid, you form a rectangle with corners:

* Top-left: `(top, left)`
* Bottom-right: `(bottom, right)`

The area of this rectangle =

$$
(height) \times (width) = (bottom - top + 1) \times (right - left + 1)
$$

---

### ðŸ”¹ Working Example

```python
grid = [
    [0, 1, 0],
    [1, 0, 1]
]
```

#### Step 1: Traverse the grid

* `(0,1)` â†’ grid\[0]\[1] = 1

  * top = min(âˆž,0) = 0
  * left = min(âˆž,1) = 1
  * right = max(0,1) = 1
  * bottom = max(0,0) = 0

* `(1,0)` â†’ grid\[1]\[0] = 1

  * top = min(0,1) = 0
  * left = min(1,0) = 0
  * right = max(1,0) = 1
  * bottom = max(0,1) = 1

* `(1,2)` â†’ grid\[1]\[2] = 1

  * top = min(0,1) = 0
  * left = min(0,2) = 0
  * right = max(1,2) = 2
  * bottom = max(1,1) = 1

Final values:

* top = 0, bottom = 1, left = 0, right = 2

#### Step 2: Calculate area

$$
(bottom - top + 1) \times (right - left + 1) = (1 - 0 + 1) \times (2 - 0 + 1) = 2 \times 3 = 6
$$

âœ… Output = `6`

This means the **minimum rectangle covering all `1`s** is:

```
Row 0 to 1, Column 0 to 2
```

```
0 1 0
1 0 1
```

Area = `6` (entire grid in this case).
