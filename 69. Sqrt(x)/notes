
### Code Breakdown

1. **Handle Special Cases**:
   ```python
   if x == 0:
       return 0
   elif x == 1:
       return 1
   ```
   - If \( x \) is `0`, the square root is `0`.
   - If \( x \) is `1`, the square root is `1`.

2. **Initialize Search Range**:
   ```python
   first, last = 2, x
   ```
   - Set `first` to `2` and `last` to \( x \). This sets up the range for the binary search.
   - Note: We start at `2` because we already handled `0` and `1`.

3. **Binary Search Loop**:
   ```python
   while first <= last:
   ```
   - The loop continues as long as the `first` index is less than or equal to the `last` index.

4. **Calculate the Midpoint**:
   ```python
   mid = first + (last - first) // 2
   ```
   - Calculate the middle index (`mid`) of the current search range.

5. **Check if Midpoint is the Square Root**:
   ```python
   if mid == x // mid:
       return mid
   ```
   - If \( \text{mid}^2 \) equals \( x \), return `mid` as the square root.

6. **Adjust Search Range**:
   ```python
   elif mid > x // mid:
       last = mid - 1
   else:
       first = mid + 1
   ```
   - If \( \text{mid} \) is greater than \( \sqrt{x} \) (i.e., \( \text{mid}^2 > x \)), adjust `last` to search the lower half.
   - If \( \text{mid} \) is less than \( \sqrt{x} \) (i.e., \( \text{mid}^2 < x \)), adjust `first` to search the upper half.

7. **Return the Largest Integer Square Root**:
   ```python
   return last
   ```
   - When the loop exits, `last` holds the largest integer whose square is less than or equal to \( x \).

### Example Walkthrough: Input \( x = 8 \)

1. **Initial Input**:
   - Input: \( x = 8 \)

2. **Special Case Check**:
   - \( x \) is neither `0` nor `1`, so we proceed.

3. **Initialize Search Range**:
   - `first = 2`, `last = 8`.

4. **First Iteration**:
   - Calculate `mid`:
     ```python
     mid = 2 + (8 - 2) // 2 = 2 + 3 = 5
     ```
   - Check \( 5 \):
     - \( 5 \times 5 = 25 > 8 \), so adjust `last`:
       ```python
       last = 5 - 1 = 4
       ```

5. **Second Iteration**:
   - `first = 2`, `last = 4`.
   - Calculate `mid`:
     ```python
     mid = 2 + (4 - 2) // 2 = 2 + 1 = 3
     ```
   - Check \( 3 \):
     - \( 3 \times 3 = 9 > 8 \), so adjust `last`:
       ```python
       last = 3 - 1 = 2
       ```

6. **Third Iteration**:
   - `first = 2`, `last = 2`.
   - Calculate `mid`:
     ```python
     mid = 2 + (2 - 2) // 2 = 2 + 0 = 2
     ```
   - Check \( 2 \):
     - \( 2 \times 2 = 4 < 8 \), so adjust `first`:
       ```python
       first = 2 + 1 = 3
       ```

7. **Exit the Loop**:
   - Now `first = 3`, `last = 2`, so the loop ends.

8. **Return the Result**:
   - Return `last`, which is `2`, as \( 2^2 = 4 \) is the largest perfect square less than \( 8 \).

### Output:
- The function outputs `2`, which is the integer square root of `8`.

