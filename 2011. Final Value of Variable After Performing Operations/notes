## üß© **Explanation:**

### 1. **Initialization**

```python
X = 0
```

* The variable `X` starts with value **0**.
* We will modify it based on the operations in the list.

---

### 2. **Loop through each operation**

```python
for i in operations:
```

* Each element `i` in the list represents a string operation.
* Possible operations:

  * `"++X"` ‚Üí increment before use
  * `"X++"` ‚Üí increment after use
  * `"--X"` ‚Üí decrement before use
  * `"X--"` ‚Üí decrement after use

However, **for this problem, both pre and post operations have the same effect** ‚Äî they just increase or decrease by 1.

---

### 3. **Condition to modify X**

```python
if i == '++X' or i == 'X++':
    X += 1
else:
    X -= 1
```

* If operation is either `"++X"` or `"X++"` ‚Üí **increase** `X` by 1.
* Otherwise (`"--X"` or `"X--"`) ‚Üí **decrease** `X` by 1.

---

### 4. **Return the final value**

```python
return X
```

After performing all operations, return the final value of `X`.

---

## üßÆ **Working Example**

### **Input:**

```python
operations = ["--X", "X++", "X++"]
```

### **Step-by-Step Execution:**

| Step | Operation | Explanation      | X (after operation) |
| ---- | --------- | ---------------- | ------------------- |
| 1    | "--X"     | Decrement X by 1 | 0 ‚Üí -1              |
| 2    | "X++"     | Increment X by 1 | -1 ‚Üí 0              |
| 3    | "X++"     | Increment X by 1 | 0 ‚Üí 1               |

‚úÖ Final value of `X = 1`

---

### **Output:**

```python
1
```

---

## üß© **Another Example:**

### Input:

```python
operations = ["++X", "++X", "X--", "X++"]
```

### Step-by-Step:

| Operation | Action | New Value of X |
| --------- | ------ | -------------- |
| "++X"     | +1     | 1              |
| "++X"     | +1     | 2              |
| "X--"     | -1     | 1              |
| "X++"     | +1     | 2              |

‚úÖ **Final X = 2**

---

## üß† **Key Points to Remember**

* Both `"++X"` and `"X++"` ‚Üí **increase X by 1**
* Both `"--X"` and `"X--"` ‚Üí **decrease X by 1**
* Start with `X = 0`
* Return final value after processing all operations

---

## üèÅ **Final Summary**

| Concept          | Meaning                                 |
| ---------------- | --------------------------------------- |
| Input            | List of operation strings               |
| Output           | Final integer value of `X`              |
| Increment Ops    | `++X`, `X++`                            |
| Decrement Ops    | `--X`, `X--`                            |
| Time Complexity  | **O(n)** (loop runs once per operation) |
| Space Complexity | **O(1)** (constant space used)          |

---

**‚úÖ Example Result:**
Input ‚Üí `["--X", "X++", "X++"]`
Output ‚Üí `1`
