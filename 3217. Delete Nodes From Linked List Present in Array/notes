## 🧩 **Code Explanation — `modifiedList()`**

### 🧠 **Goal**

Given:

* A linked list `head`
* A list of integers `nums`

👉 Remove **all nodes** from the linked list whose values appear in `nums`.

---

### ⚙️ **Code Breakdown**

```python
del_vals = set(nums)
```

* Convert `nums` to a **set** for O(1) lookup time.
* Example: if `nums = [1, 3]` → `del_vals = {1, 3}`

---

```python
dummy = ListNode(0)
dummy.next = head
```

* Create a **dummy node** to simplify deletions (especially if the head itself needs to be deleted).
* This avoids edge cases like modifying `head` directly.

---

```python
prev, current = dummy, head
```

* Two pointers:

  * `prev` → Tracks the **previous node**.
  * `current` → Iterates through each node in the list.

---

```python
while current:
    if current.val in del_vals:
        prev.next = current.next   # Skip the node
    else:
        prev = current             # Move prev normally
    current = current.next         # Always move current
```

* Traverse the list:

  * If the current node’s value is in the delete set, **bypass** it.
  * Otherwise, **keep** it and move the `prev` pointer.
  * Continue until end of list.

---

```python
return dummy.next
```

* Return the **new head** (which might have changed) via the dummy node.

---

## 🧮 **Dry Run Example**

### Input:

```
nums = [1]
head = [1 → 2 → 1 → 2 → 1 → 2]
```

### Step 1️⃣ Initialize

```
del_vals = {1}
dummy → [0] → [1 → 2 → 1 → 2 → 1 → 2]
prev = dummy
current = head (1)
```

---

### Step 2️⃣ Iteration 1

* `current.val = 1`
* `1 ∈ {1}` ✅ → delete this node.

Action:

```python
prev.next = current.next
```

Now list becomes:

```
dummy → [0] → [2 → 1 → 2 → 1 → 2]
```

Move:

```
current = current.next → [2]
(prev stays at dummy)
```

---

### Step 3️⃣ Iteration 2

* `current.val = 2`
* `2 ∉ {1}` ❌ → keep it.

Action:

```python
prev = current
current = current.next
```

Pointers:

```
prev = [2]
current = [1]
```

---

### Step 4️⃣ Iteration 3

* `current.val = 1`
* `1 ∈ {1}` ✅ → delete.

Action:

```python
prev.next = current.next
```

List becomes:

```
dummy → [0] → [2 → 2 → 1 → 2]
```

Move:

```
current = [2]
```

---

### Step 5️⃣ Iteration 4

* `current.val = 2`
* `2 ∉ {1}` ❌ → keep it.

Move:

```
prev = [2]
current = [1]
```

---

### Step 6️⃣ Iteration 5

* `current.val = 1`
* `1 ∈ {1}` ✅ → delete.

Action:

```
prev.next = current.next
```

List becomes:

```
dummy → [0] → [2 → 2 → 2]
```

Move:

```
current = [2]
```

---

### Step 7️⃣ Iteration 6

* `current.val = 2`
* `2 ∉ {1}` ❌ → keep.

Move:

```
prev = [2]
current = None (end)
```

---

### ✅ Final Linked List

```
dummy.next → [2 → 2 → 2]
```

---

### 🧾 Output

```
[2, 2, 2]
```