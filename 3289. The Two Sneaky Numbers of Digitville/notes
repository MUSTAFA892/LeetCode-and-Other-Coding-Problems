## üß† **Explanation (Line by Line)**

### üîπ Step 1: `from collections import Counter`

* `Counter` is a special Python class from the `collections` module.
* It automatically counts how many times each element appears in a list (or any iterable).

---

### üîπ Step 2: `freq = Counter(nums)`

* This creates a **dictionary-like object** where:

  * The **keys** are unique numbers from the list.
  * The **values** are how many times each number occurs.

üß© Example:

```python
nums = [1, 3, 2, 3, 4, 2]
freq = Counter(nums)
# Output ‚Üí Counter({3: 2, 2: 2, 1: 1, 4: 1})
```

---

### üîπ Step 3: Loop through `freq.items()`

```python
for k, v in freq.items():
```

* `k` ‚Üí the number
* `v` ‚Üí how many times it appears

---

### üîπ Step 4: Find ‚Äúsneaky‚Äù numbers

```python
if v >= 2:
    ans.append(k)
```

* If a number appears **two or more times**, it is considered **‚Äúsneaky‚Äù** (repeated).
* Add it to the result list `ans`.

---

### üîπ Step 5: Return result

```python
return ans
```

* After checking all elements, return the list of repeated numbers.

---

## üß© **Example Walkthrough**

### Input:

```python
nums = [1, 2, 3, 2, 4, 3, 5, 3]
```

### Step 1 ‚Üí Counter:

```python
freq = {1: 1, 2: 2, 3: 3, 4: 1, 5: 1}
```

### Step 2 ‚Üí Loop through each:

| Number | Count | Condition (`>= 2`)? | Added to ans? |
| :----: | :---: | :-----------------: | :-----------: |
|    1   |   1   |         ‚ùå No        |       ‚Äì       |
|    2   |   2   |        ‚úÖ Yes        |      [2]      |
|    3   |   3   |        ‚úÖ Yes        |     [2, 3]    |
|    4   |   1   |         ‚ùå No        |       ‚Äì       |
|    5   |   1   |         ‚ùå No        |       ‚Äì       |

‚úÖ Final Output:

```python
[2, 3]
```
