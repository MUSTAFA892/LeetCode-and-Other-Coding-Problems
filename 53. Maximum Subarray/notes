### âœ… Problem Summary

* Given an integer array `nums`, find the **contiguous subarray** (containing at least one number) with the **largest sum** and return **its sum**.

---

## ğŸ’¡ Intuition (Key Idea)

* We want the **maximum sum** of a **contiguous** subarray.
* Kadaneâ€™s Algorithm works by:

  * Keeping track of the **current running sum**.
  * Resetting it if it becomes **negative** (because adding a negative would reduce total sum).
  * Keeping the **maximum sum** encountered so far.

---

## ğŸ§© Algorithm Steps

1. **Initialize**:

   * `max_sum = 0` â†’ Running sum (temporary).
   * `res = nums[0]` â†’ Stores **maximum sum so far**.

2. **Loop through** all elements of `nums`:

   * Add current number to `max_sum`.
   * If `max_sum` is **greater than `res`**, update `res`.
   * If `max_sum` drops **below 0**, reset it to 0 (start a new subarray).

3. **Return** `res`.

---

## ğŸ§  Dry Run Example

### Input: `nums = [-2,1,-3,4,-1,2,1,-5,4]`

| Step | num | max\_sum (curr) | res (max so far) |
| ---- | --- | --------------- | ---------------- |
| 0    | -2  | -2              | -2               |
| 1    | 1   | 1               | âœ… 1              |
| 2    | -3  | -2              | 1                |
| 3    | 4   | 4               | âœ… 4              |
| 4    | -1  | 3               | 4                |
| 5    | 2   | 5               | âœ… 5              |
| 6    | 1   | 6               | âœ… 6              |
| 7    | -5  | 1               | 6                |
| 8    | 4   | 5               | 6                |

ğŸ”¹ Answer: **6** (subarray `[4, -1, 2, 1]`)

---

## âœ… Final Code (with comments)

```python
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        max_sum = 0           # Tracks the current subarray sum
        res = nums[0]         # Final result, initialized to first element

        for i in range(len(nums)):
            max_sum += nums[i]

            if max_sum > res:
                res = max_sum  # Update max if current sum is greater

            if max_sum < 0:
                max_sum = 0    # Reset sum if it becomes negative

        return res
```

---

## âœ… Key Concepts Used

* Kadaneâ€™s Algorithm
* Subarray problem
* Greedy + Dynamic Programming combo