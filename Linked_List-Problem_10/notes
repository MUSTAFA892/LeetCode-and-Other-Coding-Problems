## 1. What is a Linked List?

A linked list is a chain of nodes where each node contains:

* **Data** (value)
* A pointer/reference to the **next** node (or `None` if it's the last node)

---

## 2. Node Class

```python
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
```

* `data` stores the value.
* `next` points to the next node or `None` if it's the last.

---

## 3. Linked List Class

```python
class LL:
    def __init__(self):
        self.head = None  # Start with empty list
```

* `head` stores the reference to the first node.
* If empty, `head` is `None`.

---

## 4. Inserting at the Tail

```python
def insert(self, data):
    newNode = Node(data)  # Create new node

    if not self.head:     # If list empty
        self.head = newNode  # New node becomes head
        return self.head

    current = self.head
    while current.next:   # Traverse to last node
        current = current.next

    current.next = newNode  # Append newNode at the end
```

---

## 5. Explanation of Insertion with Step-by-Step Example

---

### Insert 1:

* Create:

```python
newNode.data = 1
newNode.next = None
```

* Since list is empty:

```python
head = None
```

* Set:

```python
head = newNode
```

**List now:**

```
head → [1 | None]
```

**Variables:**

| Variable | Points to |
| -------- | --------- |
| head     | Node(1)   |
| newNode  | Node(1)   |

---

### Insert 2:

* Create:

```python
newNode.data = 2
newNode.next = None
```

* Find last node:

```python
current = head  # current points to Node(1)
```

* Check `current.next`:

```python
current.next = None  # True, Node(1) is last node
```

* Loop ends immediately, attach newNode:

```python
current.next = newNode
```

**List now:**

```
head → [1 | ] → [2 | None]
```

**Variables:**

| Variable | Points to |
| -------- | --------- |
| head     | Node(1)   |
| current  | Node(1)   |
| newNode  | Node(2)   |

---

### Insert 3:

* Create:

```python
newNode.data = 3
newNode.next = None
```

* Find last node:

```python
current = head  # Node(1)
```

* Check `current.next`:

```python
current.next = Node(2)  # not None, move forward
current = current.next  # now current = Node(2)
```

* Check `current.next` again:

```python
current.next = None  # True
```

* Loop ends, attach newNode:

```python
current.next = newNode
```

**List now:**

```
head → [1 | ] → [2 | ] → [3 | None]
```

**Variables:**

| Variable | Points to |
| -------- | --------- |
| head     | Node(1)   |
| current  | Node(2)   |
| newNode  | Node(3)   |

---

### Insert 4:

* Create:

```python
newNode.data = 4
newNode.next = None
```

* Find last node:

```python
current = head  # Node(1)
```

* Traverse:

```python
current.next = Node(2)  # not None → current = Node(2)
current.next = Node(3)  # not None → current = Node(3)
current.next = None     # True → loop ends
```

* Attach newNode:

```python
current.next = newNode
```

**List now:**

```
head → [1 | ] → [2 | ] → [3 | ] → [4 | None]
```

**Variables:**

| Variable | Points to |
| -------- | --------- |
| head     | Node(1)   |
| current  | Node(3)   |
| newNode  | Node(4)   |

---

## 6. Final List:

```
1 → 2 → 3 → 4 → None
```

---

## 7. Summary Table of Insertions

| Inserted | head points to | current points to (last node) | current.next before attach | After attach current.next points to |
| -------- | -------------- | ----------------------------- | -------------------------- | ----------------------------------- |
| 1        | None → Node(1) | -                             | -                          | -                                   |
| 2        | Node(1)        | Node(1)                       | None                       | Node(2)                             |
| 3        | Node(1)        | Node(2)                       | None                       | Node(3)                             |
| 4        | Node(1)        | Node(3)                       | None                       | Node(4)                             |

---

## 8. Traversing the List

```python
def traverse(self):
    current = self.head
    while current:
        print(current.data, '->', end=' ')
        current = current.next
    print('None')
```

* Starts at `head`
* Prints each node’s data followed by `->`
* Stops when `current` becomes `None`, then prints `None`


