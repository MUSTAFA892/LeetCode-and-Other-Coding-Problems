### **1. Problem Statement (Short)**

Given an integer `n`, return **True** if `n` is a **power of 3**; otherwise, return **False**.

A number is a power of three if it can be written as:

$$
3^x \quad \text{where} \quad x \geq 0
$$

Examples: `1, 3, 9, 27, ...`

---

### **2. Approach**

* **Reject invalid inputs**: if `n <= 0`, it can’t be a power of 3.
* Keep dividing `n` by **3** while it’s divisible.
* If the final result is exactly `1`, then `n` is a power of 3.

---

### **3. Code Walk-through**

```python
class Solution:
    def isPowerOfThree(self, n: int) -> bool:
        # Powers of 3 must be positive
        if n <= 0:
            return False
        
        # Keep dividing by 3 while possible
        while n % 3 == 0:
            n //= 3  # integer division to avoid floating point issues
        
        # If reduced to 1, n is a power of 3
        return n == 1
```

---

### **4. Example Runs**

**Example 1:**

```
Input: n = 27
Step 1: 27 % 3 == 0 → n = 27 // 3 → n = 9
Step 2: 9 % 3 == 0 → n = 9 // 3 → n = 3
Step 3: 3 % 3 == 0 → n = 3 // 3 → n = 1
Output: True
```

**Example 2:**

```
Input: n = 45
Step 1: 45 % 3 == 0 → n = 45 // 3 → n = 15
Step 2: 15 % 3 == 0 → n = 15 // 3 → n = 5
Step 3: 5 % 3 != 0 → stop
Output: False
```

---

### **5. Complexity Analysis**

* **Time Complexity:** $O(\log_3 n)$ → Each step divides `n` by 3.
* **Space Complexity:** $O(1)$ → Uses constant extra space.
