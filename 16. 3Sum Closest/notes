
1. **Problem Definition:**
   The goal is to find three integers in an array whose sum is closest to a given target value. You must return the sum of those three integers.

2. **Input Constraints:**
   - The input is an integer array `nums` and an integer `target`.
   - It is guaranteed that there is exactly one solution for the given input.

3. **Sorting the Array:**
   The first step in solving this problem is to sort the array. Sorting allows us to efficiently search for pairs of numbers using a two-pointer technique.

4. **Initialize Closest Sum:**
   Before iterating through the array, initialize a variable `closest_sum` to a large value (like infinity). This will keep track of the closest sum found during the iterations.

5. **Iterate Through Each Element:**
   Loop through each element in the array using an index `i`. For each element, we'll try to find two additional elements whose sum, along with the current element, is closest to the target.

6. **Skip Duplicates:**
   To avoid considering the same element multiple times, skip duplicates by checking if the current element is the same as the previous one.

7. **Two-Pointer Technique:**
   Set up two pointers: `lo` starting just after `i` and `hi` starting at the end of the array. This allows us to find pairs of numbers efficiently.

8. **Calculate Current Sum:**
   In a nested loop, calculate the sum of the three numbers (`nums[i]`, `nums[lo]`, and `nums[hi]`). Check if this sum is closer to the target than the current closest sum.

9. **Adjust Pointers Based on Current Sum:**
   - If the current sum is less than the target, increment the `lo` pointer to increase the sum.
   - If the current sum is greater than the target, decrement the `hi` pointer to decrease the sum.
   - If the current sum equals the target, return this sum immediately, as it is the closest possible sum.

10. **Return the Closest Sum:**
   After iterating through all possibilities, return the `closest_sum` that was found.

### Working Example

#### Input:
- `nums = [-1, 2, 1, -4]`
- `target = 1`

#### Step-by-Step Execution:

1. **Sorting the Array:**
   - The sorted array is `[-4, -1, 1, 2]`.

2. **Initialize Variables:**
   - Set `closest_sum` to infinity (`float('inf')`).

3. **Outer Loop (i = 0):**
   - Current element is `-4`.
   - Set `lo = 1` (pointing to `-1`) and `hi = 3` (pointing to `2`).

4. **Inner Loop:**
   - Calculate `current_sum = -4 + (-1) + 2 = -3`.
   - `abs(-3 - 1) = 4` (update `closest_sum` to `-3`).

5. **Adjust Pointers:**
   - Since `-3 < 1`, increment `lo` to `2`.

6. **Recalculate:**
   - Now calculate `current_sum = -4 + 1 + 2 = -1`.
   - `abs(-1 - 1) = 2` (update `closest_sum` to `-1`).
   - Increment `lo` to `3`, now `lo` equals `hi`, exit inner loop.

7. **Outer Loop (i = 1):**
   - Current element is `-1`.
   - Set `lo = 2` and `hi = 3`.

8. **Inner Loop:**
   - Calculate `current_sum = -1 + 1 + 2 = 2`.
   - `abs(2 - 1) = 1` (update `closest_sum` to `2`).
   - Since `2 > 1`, decrement `hi` to `2`, exit inner loop.

9. **End of Outer Loop:**
   - All elements have been considered.

10. **Return Closest Sum:**
   - The closest sum found is `2`.

### Output:
```
The closest sum to target is: 2
```

