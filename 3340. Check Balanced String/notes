

1. **Class Definition**:
   - The code is part of the `Solution` class, which is common in problems like those on LeetCode, where solutions are often encapsulated within a class.

2. **Method Signature**:
   - The method `isBalanced` takes a single input parameter `num`, which is a string representing a number.

3. **Initialization of `Even` and `Odd` Lists**:
   - `Even = []`: This list will store the digits that are found at **even indices** (starting from 0) in the string `num`.
   - `Odd = []`: This list will store the digits that are found at **odd indices** (starting from 1) in the string `num`.

4. **Loop Through the String**:
   - The `for i in range(len(num)):` loop iterates over each character in the string `num`, where `i` is the index of the current character.

5. **Identifying Even and Odd Indices**:
   - Inside the loop:
     - **Even Indices**: `if i % 2 == 0:` checks if the index `i` is even (i.e., divisible by 2). If true, the digit at that index is appended to the `Even` list.
     - **Odd Indices**: `else:` handles the case when `i` is odd (i.e., not divisible by 2). If true, the digit at that index is appended to the `Odd` list.

6. **Sum of Digits**:
   - After the loop finishes, the `sum(Even)` function calculates the sum of all the digits in the `Even` list.
   - Similarly, `sum(Odd)` calculates the sum of all the digits in the `Odd` list.

7. **Comparison of Sums**:
   - `return sum(Even) == sum(Odd)`: The function returns `True` if the sum of the digits at even indices is equal to the sum of the digits at odd indices, otherwise it returns `False`.

8. **Time Complexity**:
   - The time complexity of this function is **O(n)**, where `n` is the length of the string `num`. This is because we are iterating through the string once and summing the digits in the `Even` and `Odd` lists.

9. **Space Complexity**:
   - The space complexity is **O(n)**, as we are storing digits in two separate lists (`Even` and `Odd`), each of which may contain up to `n` elements in the worst case.

10. **Edge Case Handling**:
   - If the string `num` is empty (`""`), the function will return `True` since both `Even` and `Odd` lists will be empty and their sums will be equal (both 0).

### Working Examples:

#### Example 1: `"1234"`

1. **Initial State**:
   - `num = "1234"`
   - `Even = []`, `Odd = []`

2. **Processing Each Digit**:
   - `i = 0`: Even index, so `Even = [1]` (digit `1`).
   - `i = 1`: Odd index, so `Odd = [2]` (digit `2`).
   - `i = 2`: Even index, so `Even = [1, 3]` (digit `3`).
   - `i = 3`: Odd index, so `Odd = [2, 4]` (digit `4`).

3. **Summing Even and Odd Digits**:
   - `sum(Even) = 1 + 3 = 4`
   - `sum(Odd) = 2 + 4 = 6`

4. **Result**:
   - `4 != 6`, so the function returns `False`.

#### Example 2: `"13579"`

1. **Initial State**:
   - `num = "13579"`
   - `Even = []`, `Odd = []`

2. **Processing Each Digit**:
   - `i = 0`: Even index, so `Even = [1]` (digit `1`).
   - `i = 1`: Odd index, so `Odd = [3]` (digit `3`).
   - `i = 2`: Even index, so `Even = [1, 5]` (digit `5`).
   - `i = 3`: Odd index, so `Odd = [3, 7]` (digit `7`).
   - `i = 4`: Even index, so `Even = [1, 5, 9]` (digit `9`).

3. **Summing Even and Odd Digits**:
   - `sum(Even) = 1 + 5 + 9 = 15`
   - `sum(Odd) = 3 + 7 = 10`

4. **Result**:
   - `15 != 10`, so the function returns `False`.

#### Example 3: `"246"`

1. **Initial State**:
   - `num = "246"`
   - `Even = []`, `Odd = []`

2. **Processing Each Digit**:
   - `i = 0`: Even index, so `Even = [2]` (digit `2`).
   - `i = 1`: Odd index, so `Odd = [4]` (digit `4`).
   - `i = 2`: Even index, so `Even = [2, 6]` (digit `6`).

3. **Summing Even and Odd Digits**:
   - `sum(Even) = 2 + 6 = 8`
   - `sum(Odd) = 4`

4. **Result**:
   - `8 != 4`, so the function returns `False`.

#### Example 4: `"123"`

1. **Initial State**:
   - `num = "123"`
   - `Even = []`, `Odd = []`

2. **Processing Each Digit**:
   - `i = 0`: Even index, so `Even = [1]` (digit `1`).
   - `i = 1`: Odd index, so `Odd = [2]` (digit `2`).
   - `i = 2`: Even index, so `Even = [1, 3]` (digit `3`).

3. **Summing Even and Odd Digits**:
   - `sum(Even) = 1 + 3 = 4`
   - `sum(Odd) = 2`

4. **Result**:
   - `4 != 2`, so the function returns `False`.

#### Example 5: `""` (Empty string)

1. **Initial State**:
   - `num = ""`
   - `Even = []`, `Odd = []`

2. **Processing**:
   - There are no digits to process.

3. **Summing Even and Odd Digits**:
   - `sum(Even) = 0`
   - `sum(Odd) = 0`

4. **Result**:
   - `0 == 0`, so the function returns `True`.

